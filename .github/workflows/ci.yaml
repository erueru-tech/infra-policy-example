name: ci

# PR作成時、コミットプッシュ時にワークフローを実行
on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize]

# ワークフローの同時実行数を1にするための設定
# 複数のPRからterraform applyやterraform testが同時実行されないようにする
# groupの値をstg.yamlやprod.yamlでも同じにすると、全環境で1度に1つのワークフローしか実行できなくなるので注意
# (ただしstagingのapply中にこのワークフローを実行すると、plan時にロックが取得できずにエラーが出るのでその辺りの取り扱いはポリシー次第)
# cancel-in-progress:falseにすると既に実行済みのワークフローの実行が完了するまで、後続のワークフローは待機するようになる
# cancel-in-progress:trueにすると既に実行済みのワークフローをキャンセルして、後続のワークフローを開始する
concurrency:
  group: test
  cancel-in-progress: false

# すべてのアクセス許可を無効に設定
permissions: {}

env:
  OPA_VERSION: 0.64.1
  CONFTEST_VERSION: 0.51.0
  REGAL_VERSION: 0.21.3

jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - name: checkout project
        # @vXのようなバージョン指定にすると、最新バージョンでセキュリティ的に問題があるアクションを意図せず使用してしまう可能性がある
        # よって@vX.Y.Zにすればリスクは軽減するが、それでもバージョンは自由に作り直せるのでより厳密にコミットハッシュを指定
        # v4.1.1 ref. https://github.com/actions/checkout/releases/tag/v4.1.1
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11

      # opa CLIをインストール
      - name: install opa CLI
        # v2.2.0 ref. https://github.com/open-policy-agent/setup-opa/releases/tag/v2.2.0
        uses: open-policy-agent/setup-opa@34a30e8a924d1b03ce2cf7abe97250bbb1f332b5
        with:
          version: ${{ env.OPA_VERSION }}

      # Regoファイルのフォーマットをチェック
      - name: run opa fmt
        run: |
          ./scripts/opafmt.sh

      # regal CLIをインストール
      - name: install regal CLI
        # v1.0.0 ref. https://github.com/StyraInc/setup-regal/releases/tag/v1.0.0
        uses: StyraInc/setup-regal@33a142b1189004e0f14bf42b15972c67eecce776
        with:
          version: ${{ env.REGAL_VERSION }}

      # Regoファイルに対してリンタを実行
      - name: run regal lint
        run: |
          ./scripts/regal.sh

      # 既にインストール済みのConftestがキャッシュに存在する場合restore
      - name: cache conftest CLI
        id: conftest-cache
        # v4.0.2 ref. https://github.com/actions/cache/releases/tag/v4.0.2
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9
        with:
          path: /usr/local/bin/conftest
          key: conftest-${{ env.CONFTEST_VERSION }}

      # キャッシュにConftestが存在しない場合インストール
      - name: install conftest if the cache doesn't exist
        if: steps.conftest-cache.outputs.cache-hit != 'true'
        run: |
          CONFTEST_FILE=conftest_${{ env.CONFTEST_VERSION }}_$(uname)_$(arch).tar.gz
          wget "https://github.com/open-policy-agent/conftest/releases/download/v${CONFTEST_VERSION}/${CONFTEST_FILE}"
          tar xzf ${CONFTEST_FILE}
          sudo mv conftest /usr/local/bin

      # Conftestを使用してプロジェクト内の全設定ファイルの定義がポリシーに適合しているかチェック
      - name: run conftest
        run: |
          ./scripts/conftest.sh

  slack:
    if: always()
    runs-on: ubuntu-22.04
    needs: test
    permissions:
      contents: read
    steps:
      - name: checkout project
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11

      # ワークフローの実行結果をSlackの指定したチャネルに通知
      - name: send the workflow result to the slack channel
        uses: ./.github/actions/slack
        with:
          conclusion: ${{ needs.test.result }}
          channel_id: ${{ vars.SLACK_CHANNEL_ID }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
